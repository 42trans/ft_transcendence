version: "3.7"

volumes:
  certs:
    driver: local
  elasticsearchdata:
    driver: local
  kibanadata:
    driver: local

# TODO: profile
# TODO: volumes top level
# TODO: .yml 切り分け　ディレクトリに入れる
# 参考:【DockerでElastic Stack 8.2環境の構築 #Docker - Qiita】 https://qiita.com/ohhara_shiojiri/items/0b45fd000103b7345073
services:
  logstash:
    depends_on:
      elasticsearch:
        condition: service_healthy
    build: ./logstash
    image: logstash_transcendence
    volumes:
      # - elk_cert_vol:/usr/share/elasticsearch/config/certs
      - certs:/usr/share/elasticsearch/config/certs
      - ./logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml
      # - ./logstash/pipeline:/usr/share/logstash/pipeline
      - ${VOLUME_PATH}:/container_output
    ports:
      - "${LOGSTASH_PORT}:5044"
    env_file:
      - .env
    networks:
      - elastic_transcendence
    profiles:
      - elk


  elasticsearch:
    depends_on:
      setup:
        condition: service_healthy
    build: 
      context: ./elasticsearch
      dockerfile: Dockerfile
    image: elasticsearch_transcendence
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      # - ${VOLUME_PATH}/elastic_search:/usr/share/elasticsearch/data
      - elasticsearchdata:/usr/share/elasticsearch/data
    env_file:
      - .env
    ports:
      - "${ELASTIC_SEARCH_PORT}:9200"
    environment:
      - xpack.license.self_generated.type=${LICENSE}
      - cluster.name=${CLUSTER_NAME}
      - cluster.initial_master_nodes=elasticsearch
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - xpack.license.self_generated.type=${LICENSE}
      # .ymlがわからない
      - node.name=elasticsearch
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/elasticsearch/elasticsearch.key
      - xpack.security.http.ssl.certificate=certs/elasticsearch/elasticsearch.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/elasticsearch/elasticsearch.key
      - xpack.security.transport.ssl.certificate=certs/elasticsearch/elasticsearch.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
    mem_limit: ${MEM_LIMIT}
    networks:
      - elastic_transcendence
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120
    profiles:
      - elk

  kibana:
    depends_on:
      elasticsearch:
        condition: service_healthy
    build: 
      context: ./kibana
      dockerfile: Dockerfile
    image: kibana_transcendence
    volumes:
      # - elk_cert_vol:/usr/share/kibana/config/certs
      - certs:/usr/share/kibana/config/certs
      # - ${VOLUME_PATH}/kibana:/usr/share/kibana/data
      - kibanadata:/usr/share/kibana/data
      - ./kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml
      - ${VOLUME_PATH}:/container_output
    ports:
      - ${KIBANA_PORT}:5601
    env_file:
      - .env
    environment:
      - SERVERNAME=kibana
      - ELASTICSEARCH_HOSTS=https://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
    mem_limit: ${MEM_LIMIT}
    networks:
      - elastic_transcendence
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120
    profiles:
      - elk

  setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      # - elk_cert_vol:/usr/share/elasticsearch/config/certs
      - certs:/usr/share/elasticsearch/config/certs
    networks:
      - elastic_transcendence
    user: "0"
    command: >
      bash -c '
        if [ x${ELASTIC_PASSWORD} == x ]; then
          echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
          exit 1;
        elif [ x${KIBANA_PASSWORD} == x ]; then
          echo "Set the KIBANA_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        if [ ! -f config/certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f config/certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: elasticsearch\n"\
          "    dns:\n"\
          "      - elasticsearch\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
        fi;
        echo "Setting file permissions"
        chown -R root:root config/certs;
        find . -type d -exec chmod 755 \{\} \;;
        find . -type f -exec chmod 644 \{\} \;;
        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert config/certs/ca/ca.crt https://elasticsearch:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
        echo "Setting kibana_system password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://elasticsearch:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        echo "All done!";
      '
    healthcheck:
      test: ["CMD-SHELL", "[ -f config/certs/elasticsearch/elasticsearch.crt ]"]
      interval: 1s
      timeout: 5s
      retries: 120
    profiles:
      - elk

