version: "3.7"
# docker/srcs/compose-web.yaml
services:
  nginx:
    container_name: nginx
    build: ./nginx
    image: nginx
    env_file:
      - .env
    ports:
      - "${NGINX_SSL_PORT:?}:443"
      - "${NGINX_PORT:?}:8085"
    environment:
      - SERVER_NAME=${SERVER_NAME:?}
    volumes:
      # - ${VOLUME_PATH:?}/nginx/static:/static
      - ${SSL_CERT_PATH:?}:/etc/nginx/ssl/nginx.crt
      - ${SSL_KEY_PATH:?}:/etc/nginx/ssl/nginx.key
      # - ${VOLUME_PATH:?}:/container_output
      - ${VOLUME_PATH:?}/log_vol:/var/log/nginx
      - ./uwsgi-django/static/:/var/trans/static/
    networks:
      - web_transcendence
      # - monitor_transcendence
    restart: unless-stopped
    depends_on:
      # - pgadmin
      - uwsgi-django
    init: true

  frontend:
    container_name: frontend
    build: ./frontend
    image: frontend
    env_file:
      - .env
    networks:
      - web_transcendence
      # - monitor_transcendence
    ports:
      - "${FRONTEND_PORT:?}:3000"
      - "3090:3001"
    restart: unless-stopped
    init: true

  uwsgi-django:
    container_name: uwsgi-django
    build: ./uwsgi-django
    image: uwsgi-django
    env_file:
      - .env
      # - ./uwsgi-django/.env
    # environment:
    #   - DJANGO_SUPERUSER_USERNAME=${DJANGO_SUPERUSER_USERNAME:?}
    #   - DJANGO_SUPERUSER_EMAIL=${DJANGO_SUPERUSER_EMAIL:?}
    #   - DJANGO_SUPERUSER_PASSWORD=${DJANGO_SUPERUSER_PASSWORD:?}
    networks:
      - db_transcendence
      - web_transcendence
      - blockchain_transcendence
      - elk
    ports:
      - "8096:8001" # http
      - "${DJANGO_PORT:?}:8000"
      - "8002:8002"
    depends_on:
      - postgres
    restart: unless-stopped
    init: true
    volumes:
      - '${VOLUME_PATH:?}/log_django_vol:/src/logs'
      - ./uwsgi-django/:/code/
      - ./uwsgi-django/static/:/var/trans/static/
      - ./hardhat/hardhat_pj/share/:/code/share_hardhat/
      # - logs_volume:/src/logs
      # - ${VOLUME_PATH:?}/django/code:/code
  #     - ${VOLUME_PATH:?}/ft_django/uwsgi:/etc/uwsgi
  #     - ${VOLUME_PATH:?}:/container_output

  postgres:
    container_name: postgres
    build: ./postgres
    image: postgres
    env_file:
      - .env
    environment:
      # 冗長だが明示的に指定。　.envを上書きしたい場合に活用する
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:?}
      - POSTGRES_USER=${POSTGRES_USER:?}
      - POSTGRES_DB=${POSTGRES_DB:?POSTGRES_DB is not set}
      - POSTGRES_HOST_AUTH_METHOD=${POSTGRES_HOST_AUTH_METHOD:?}
      - POSTGRES_LOCAL_AUTH_METHOD=${POSTGRES_LOCAL_AUTH_METHOD:?}
    volumes:
      - ${VOLUME_PATH:?}/postgres:/var/lib/postgresql/data
      # - ${VOLUME_PATH:?}:/container_output
    networks:
      - db_transcendence
    ports:
      - "${POSTGRES_PORT:?}:5432"
    restart: unless-stopped
    init: true

  # pgadmin:
  #   container_name: pgadmin
  #   build: ./pgadmin
  #   image: pgadmin
  #   env_file:
  #     - .env
  #   environment:
  #     - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL:?}
  #     - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD:?}
  #   ports:
  #     - "${PGADMIN_PORT:?}:80"
  #   volumes:
  #     - ${VOLUME_PATH:?}/pgadmin:/var/lib/pgadmin
  #   networks:
  #     - db_transcendence
  #     - web_transcendence
  #   restart: unless-stopped
  #   init: true

  # pythontest:
  #   container_name: pythontest
  #   build: ./pythontest
  #   image: pythontest
  #   env_file:
  #     - .env
  #   networks:
  #     - db_transcendence
  #     - web_transcendence
  #     - blockchain_transcendence
  #     - elk
  #   ports:
  #     - "8097:8001" # http
  #     - "8197:8000"
  #   depends_on:
  #     - postgres
  #   restart: unless-stopped
  #   init: true
  #   volumes:
  #     - ./pythontest/mysite/:/code/mysite/
  #     - ./pythontest/polls/:/code/polls/
